// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/ke/v1alpha/ke.proto

package kev1alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha "github.com/nokamoto/2pf23/pkg/api/ke/v1alpha"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KeServiceName is the fully-qualified name of the KeService service.
	KeServiceName = "api.ke.v1alpha.KeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KeServiceCreateClusterProcedure is the fully-qualified name of the KeService's CreateCluster RPC.
	KeServiceCreateClusterProcedure = "/api.ke.v1alpha.KeService/CreateCluster"
	// KeServiceGetClusterProcedure is the fully-qualified name of the KeService's GetCluster RPC.
	KeServiceGetClusterProcedure = "/api.ke.v1alpha.KeService/GetCluster"
	// KeServiceDeleteClusterProcedure is the fully-qualified name of the KeService's DeleteCluster RPC.
	KeServiceDeleteClusterProcedure = "/api.ke.v1alpha.KeService/DeleteCluster"
	// KeServiceListClusterProcedure is the fully-qualified name of the KeService's ListCluster RPC.
	KeServiceListClusterProcedure = "/api.ke.v1alpha.KeService/ListCluster"
	// KeServiceUpdateClusterProcedure is the fully-qualified name of the KeService's UpdateCluster RPC.
	KeServiceUpdateClusterProcedure = "/api.ke.v1alpha.KeService/UpdateCluster"
)

// KeServiceClient is a client for the api.ke.v1alpha.KeService service.
type KeServiceClient interface {
	CreateCluster(context.Context, *connect_go.Request[v1alpha.CreateClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error)
	GetCluster(context.Context, *connect_go.Request[v1alpha.GetClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error)
	DeleteCluster(context.Context, *connect_go.Request[v1alpha.DeleteClusterRequest]) (*connect_go.Response[emptypb.Empty], error)
	ListCluster(context.Context, *connect_go.Request[v1alpha.ListClusterRequest]) (*connect_go.Response[v1alpha.ListClusterResponse], error)
	UpdateCluster(context.Context, *connect_go.Request[v1alpha.UpdateClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error)
}

// NewKeServiceClient constructs a client for the api.ke.v1alpha.KeService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &keServiceClient{
		createCluster: connect_go.NewClient[v1alpha.CreateClusterRequest, v1alpha.Cluster](
			httpClient,
			baseURL+KeServiceCreateClusterProcedure,
			opts...,
		),
		getCluster: connect_go.NewClient[v1alpha.GetClusterRequest, v1alpha.Cluster](
			httpClient,
			baseURL+KeServiceGetClusterProcedure,
			opts...,
		),
		deleteCluster: connect_go.NewClient[v1alpha.DeleteClusterRequest, emptypb.Empty](
			httpClient,
			baseURL+KeServiceDeleteClusterProcedure,
			opts...,
		),
		listCluster: connect_go.NewClient[v1alpha.ListClusterRequest, v1alpha.ListClusterResponse](
			httpClient,
			baseURL+KeServiceListClusterProcedure,
			opts...,
		),
		updateCluster: connect_go.NewClient[v1alpha.UpdateClusterRequest, v1alpha.Cluster](
			httpClient,
			baseURL+KeServiceUpdateClusterProcedure,
			opts...,
		),
	}
}

// keServiceClient implements KeServiceClient.
type keServiceClient struct {
	createCluster *connect_go.Client[v1alpha.CreateClusterRequest, v1alpha.Cluster]
	getCluster    *connect_go.Client[v1alpha.GetClusterRequest, v1alpha.Cluster]
	deleteCluster *connect_go.Client[v1alpha.DeleteClusterRequest, emptypb.Empty]
	listCluster   *connect_go.Client[v1alpha.ListClusterRequest, v1alpha.ListClusterResponse]
	updateCluster *connect_go.Client[v1alpha.UpdateClusterRequest, v1alpha.Cluster]
}

// CreateCluster calls api.ke.v1alpha.KeService.CreateCluster.
func (c *keServiceClient) CreateCluster(ctx context.Context, req *connect_go.Request[v1alpha.CreateClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error) {
	return c.createCluster.CallUnary(ctx, req)
}

// GetCluster calls api.ke.v1alpha.KeService.GetCluster.
func (c *keServiceClient) GetCluster(ctx context.Context, req *connect_go.Request[v1alpha.GetClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// DeleteCluster calls api.ke.v1alpha.KeService.DeleteCluster.
func (c *keServiceClient) DeleteCluster(ctx context.Context, req *connect_go.Request[v1alpha.DeleteClusterRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteCluster.CallUnary(ctx, req)
}

// ListCluster calls api.ke.v1alpha.KeService.ListCluster.
func (c *keServiceClient) ListCluster(ctx context.Context, req *connect_go.Request[v1alpha.ListClusterRequest]) (*connect_go.Response[v1alpha.ListClusterResponse], error) {
	return c.listCluster.CallUnary(ctx, req)
}

// UpdateCluster calls api.ke.v1alpha.KeService.UpdateCluster.
func (c *keServiceClient) UpdateCluster(ctx context.Context, req *connect_go.Request[v1alpha.UpdateClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error) {
	return c.updateCluster.CallUnary(ctx, req)
}

// KeServiceHandler is an implementation of the api.ke.v1alpha.KeService service.
type KeServiceHandler interface {
	CreateCluster(context.Context, *connect_go.Request[v1alpha.CreateClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error)
	GetCluster(context.Context, *connect_go.Request[v1alpha.GetClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error)
	DeleteCluster(context.Context, *connect_go.Request[v1alpha.DeleteClusterRequest]) (*connect_go.Response[emptypb.Empty], error)
	ListCluster(context.Context, *connect_go.Request[v1alpha.ListClusterRequest]) (*connect_go.Response[v1alpha.ListClusterResponse], error)
	UpdateCluster(context.Context, *connect_go.Request[v1alpha.UpdateClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error)
}

// NewKeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKeServiceHandler(svc KeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(KeServiceCreateClusterProcedure, connect_go.NewUnaryHandler(
		KeServiceCreateClusterProcedure,
		svc.CreateCluster,
		opts...,
	))
	mux.Handle(KeServiceGetClusterProcedure, connect_go.NewUnaryHandler(
		KeServiceGetClusterProcedure,
		svc.GetCluster,
		opts...,
	))
	mux.Handle(KeServiceDeleteClusterProcedure, connect_go.NewUnaryHandler(
		KeServiceDeleteClusterProcedure,
		svc.DeleteCluster,
		opts...,
	))
	mux.Handle(KeServiceListClusterProcedure, connect_go.NewUnaryHandler(
		KeServiceListClusterProcedure,
		svc.ListCluster,
		opts...,
	))
	mux.Handle(KeServiceUpdateClusterProcedure, connect_go.NewUnaryHandler(
		KeServiceUpdateClusterProcedure,
		svc.UpdateCluster,
		opts...,
	))
	return "/api.ke.v1alpha.KeService/", mux
}

// UnimplementedKeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKeServiceHandler struct{}

func (UnimplementedKeServiceHandler) CreateCluster(context.Context, *connect_go.Request[v1alpha.CreateClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ke.v1alpha.KeService.CreateCluster is not implemented"))
}

func (UnimplementedKeServiceHandler) GetCluster(context.Context, *connect_go.Request[v1alpha.GetClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ke.v1alpha.KeService.GetCluster is not implemented"))
}

func (UnimplementedKeServiceHandler) DeleteCluster(context.Context, *connect_go.Request[v1alpha.DeleteClusterRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ke.v1alpha.KeService.DeleteCluster is not implemented"))
}

func (UnimplementedKeServiceHandler) ListCluster(context.Context, *connect_go.Request[v1alpha.ListClusterRequest]) (*connect_go.Response[v1alpha.ListClusterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ke.v1alpha.KeService.ListCluster is not implemented"))
}

func (UnimplementedKeServiceHandler) UpdateCluster(context.Context, *connect_go.Request[v1alpha.UpdateClusterRequest]) (*connect_go.Response[v1alpha.Cluster], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.ke.v1alpha.KeService.UpdateCluster is not implemented"))
}
