// Code generated by MockGen. DO NOT EDIT.
// Source: runtime.go

// Package mockruntime is a generated GoMock package.
package mockruntime

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kev1alphaconnect "github.com/nokamoto/2pf23/pkg/api/ke/v1alpha/kev1alphaconnect"
	cobra "github.com/spf13/cobra"
)

// MockRuntime is a mock of Runtime interface.
type MockRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeMockRecorder
}

// MockRuntimeMockRecorder is the mock recorder for MockRuntime.
type MockRuntimeMockRecorder struct {
	mock *MockRuntime
}

// NewMockRuntime creates a new mock instance.
func NewMockRuntime(ctrl *gomock.Controller) *MockRuntime {
	mock := &MockRuntime{ctrl: ctrl}
	mock.recorder = &MockRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntime) EXPECT() *MockRuntimeMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRuntime) Context(arg0 *cobra.Command) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRuntimeMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRuntime)(nil).Context), arg0)
}

// KeV1alpha mocks base method.
func (m *MockRuntime) KeV1alpha(arg0 *cobra.Command) (kev1alphaconnect.KeServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeV1alpha", arg0)
	ret0, _ := ret[0].(kev1alphaconnect.KeServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeV1alpha indicates an expected call of KeV1alpha.
func (mr *MockRuntimeMockRecorder) KeV1alpha(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeV1alpha", reflect.TypeOf((*MockRuntime)(nil).KeV1alpha), arg0)
}
