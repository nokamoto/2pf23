// Code generated by cli-gen. DO NOT EDIT.
package cluster

import (
	"fmt"
)

import (
	"github.com/nokamoto/2pf23/internal/cli/runtime"
	v1alpha "github.com/nokamoto/2pf23/pkg/api/ke/v1alpha"
	"github.com/spf13/cobra"
	"google.golang.org/protobuf/encoding/protojson"
)

func newCreateCluster(rt runtime.Runtime) *cobra.Command {
	var displayName string
	var numNodes int32
	cmd := &cobra.Command{
		Use:          "create",
		Short:        "create is a command to create a new Cluster",
		Long:         `create is a command to create a new Cluster`,
		SilenceUsage: true,
		Args:         cobra.ExactArgs(0),
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx := rt.Context(cmd)
			c, err := rt.KeV1alpha(cmd)
			if err != nil {
				return fmt.Errorf("failed to create a client for ke.v1alpha: %w", err)
			}
			res, err := c.CreateCluster(ctx, &v1alpha.CreateClusterRequest{
				Cluster: &v1alpha.Cluster{
					DisplayName: displayName,
					NumNodes:    numNodes,
				},
			})
			if err != nil {
				return fmt.Errorf("ke.v1alpha: failed to CreateCluster: %w", err)
			}
			message, err := protojson.Marshal(res)
			if err != nil {
				return err
			}
			cmd.Println(string(message))
			return nil
		},
	}
	cmd.Flags().StringVar(&displayName, "display-name", "", "The display name of the cluster.")
	cmd.Flags().Int32Var(&numNodes, "num-nodes", 0, "The number of worker nodes in the cluster.")
	return cmd
}
