// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mockhelper is a generated GoMock package.
package mockhelper

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	helper "github.com/nokamoto/2pf23/internal/util/helper"
)

// MockKeServiceClient is a mock of KeServiceClient interface.
type MockKeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeServiceClientMockRecorder
}

// MockKeServiceClientMockRecorder is the mock recorder for MockKeServiceClient.
type MockKeServiceClientMockRecorder struct {
	mock *MockKeServiceClient
}

// NewMockKeServiceClient creates a new mock instance.
func NewMockKeServiceClient(ctrl *gomock.Controller) *MockKeServiceClient {
	mock := &MockKeServiceClient{ctrl: ctrl}
	mock.recorder = &MockKeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeServiceClient) EXPECT() *MockKeServiceClientMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockKeServiceClient) CreateCluster(arg0 context.Context, arg1 *helper.CreateClusterRequest) (*helper.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(*helper.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockKeServiceClientMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockKeServiceClient)(nil).CreateCluster), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockKeServiceClient) DeleteCluster(arg0 context.Context, arg1 *helper.DeleteClusterRequest) (*helper.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(*helper.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockKeServiceClientMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockKeServiceClient)(nil).DeleteCluster), arg0, arg1)
}

// GetCluster mocks base method.
func (m *MockKeServiceClient) GetCluster(arg0 context.Context, arg1 *helper.GetClusterRequest) (*helper.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*helper.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockKeServiceClientMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockKeServiceClient)(nil).GetCluster), arg0, arg1)
}

// ListCluster mocks base method.
func (m *MockKeServiceClient) ListCluster(arg0 context.Context, arg1 *helper.ListClusterRequest) (*helper.ListClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCluster", arg0, arg1)
	ret0, _ := ret[0].(*helper.ListClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCluster indicates an expected call of ListCluster.
func (mr *MockKeServiceClientMockRecorder) ListCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCluster", reflect.TypeOf((*MockKeServiceClient)(nil).ListCluster), arg0, arg1)
}

// UpdateCluster mocks base method.
func (m *MockKeServiceClient) UpdateCluster(arg0 context.Context, arg1 *helper.UpdateClusterRequest) (*helper.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0, arg1)
	ret0, _ := ret[0].(*helper.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockKeServiceClientMockRecorder) UpdateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockKeServiceClient)(nil).UpdateCluster), arg0, arg1)
}
