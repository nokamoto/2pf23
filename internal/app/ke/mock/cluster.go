// Code generated by MockGen. DO NOT EDIT.
// Source: cluster.go

// Package mockke is a generated GoMock package.
package mockke

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kev1alpha "github.com/nokamoto/2pf23/pkg/api/ke/v1alpha"
)

// Mockruntime is a mock of runtime interface.
type Mockruntime struct {
	ctrl     *gomock.Controller
	recorder *MockruntimeMockRecorder
}

// MockruntimeMockRecorder is the mock recorder for Mockruntime.
type MockruntimeMockRecorder struct {
	mock *Mockruntime
}

// NewMockruntime creates a new mock instance.
func NewMockruntime(ctrl *gomock.Controller) *Mockruntime {
	mock := &Mockruntime{ctrl: ctrl}
	mock.recorder = &MockruntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockruntime) EXPECT() *MockruntimeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Mockruntime) Create(arg0 context.Context, arg1 *kev1alpha.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockruntimeMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockruntime)(nil).Create), arg0, arg1)
}

// NewID mocks base method.
func (m *Mockruntime) NewID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewID")
	ret0, _ := ret[0].(string)
	return ret0
}

// NewID indicates an expected call of NewID.
func (mr *MockruntimeMockRecorder) NewID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewID", reflect.TypeOf((*Mockruntime)(nil).NewID))
}
