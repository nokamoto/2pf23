// Code generated by cli-gen. DO NOT EDIT.
package {{.Command.Package}}

import (
	"fmt"
)

import (
{{- range .Imports}}
	{{if .Alias}}{{.Alias}} "{{.Path}}"{{else}}"{{.Path}}"{{end}}
{{- end}}
)

func new{{.Command.Method}}({{.Runtime.Name}} {{.Runtime.Type}}) *cobra.Command {
{{- range .Command.StringFlags}}
	var {{.Name}} string
{{- end}}
{{- range .Command.Int32Flags}}
	var {{.Name}} int32
{{- end}}
{{- range .Command.EnumFlags}}
	var {{.Name}} {{.Type}}
{{- end}}
	cmd := &cobra.Command{
		Use:   "{{.Command.Use}}",
		Short: "{{.Command.Short}}",
		Long:  `{{.Command.Long}}`,
{{- if .ExactArgs0}}
		Args:  cobra.ExactArgs(0),
{{- else if .ExactArgs1}}
		Args:  cobra.ExactArgs(1),
{{- end}}
		RunE: func(cmd *cobra.Command, args []string) error {
			cmd.SilenceUsage = true
			ctx := {{.Runtime.Name}}.Context(cmd)
			c, err := {{.Runtime.Name}}.{{.Command.Api | ToTitle}}{{.Command.ApiVersion | ToTitle}}(cmd)
			if err != nil {
				return fmt.Errorf("failed to create a client for {{.Command.Api}}.{{.Command.ApiVersion}}: %w", err)
			}
{{- if eq .Command.MethodType 4}}
			var res {{.Command.Response.Type}}
			setter := func(token string) *{{.Command.Request.Type}} {
				return &{{.Command.Request.Type}}{
					PageToken: token,
				}
			}
			getter := func(v *{{.Command.Response.Type}}) {
				res.{{.Command.Response.ListField}} = append(res.{{.Command.Response.ListField}}, v.{{.Command.Response.ListField}}...)
			}
			err = helper.ListAll(ctx, c.{{.Command.Method}}, setter, getter)
{{- else}}
{{- if eq .Command.MethodType 5}}
			var paths []string
{{- range .Command.StringFlags}}
			if cmd.Flags().Changed("{{.DisplayName}}") {
				paths = append(paths, "{{.Path}}")
			}
{{- end}}
{{- range .Command.Int32Flags}}
			if cmd.Flags().Changed("{{.DisplayName}}") {
				paths = append(paths, "{{.Path}}")
			}
{{- end}}
			mask, err := fieldmaskpb.New(&v1alpha.Cluster{}, paths...)
			if err != nil {
				return fmt.Errorf("failed to create a field mask: %w", err)
			}
{{- end}}
			res, err := c.{{.Command.Method}}(ctx, {{.Command.Request | ToValue 3}})
{{- end}}
			if err != nil {
				return fmt.Errorf("{{.Command.Api}}.{{.Command.ApiVersion}}: failed to {{.Command.Method}}: %w", err)
			}
			message, err := protojson.Marshal({{if eq .Command.MethodType 4}}&{{end}}res)
			if err != nil {
				return err
			}
			cmd.Println(string(message))
			return nil
		},
	}
{{- range .Command.StringFlags}}
	cmd.Flags().StringVar(&{{.Name}}, "{{.DisplayName}}", "{{.Value}}", "{{.Usage}}")
{{- end}}
{{- range .Command.Int32Flags}}
	cmd.Flags().Int32Var(&{{.Name}}, "{{.DisplayName}}", {{.Value}}, "{{.Usage}}")
{{- end}}
	return cmd
}
