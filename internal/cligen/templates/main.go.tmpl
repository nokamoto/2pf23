// Code generated by cli-gen. DO NOT EDIT.
package {{.Command.Package}}

import (
	"fmt"
)

import (
{{- range .Imports}}
	{{if .Alias}}{{.Alias}} "{{.Path}}"{{else}}"{{.Path}}"{{end}}
{{- end}}
)

func new{{.Command.Method}}({{.Runtime.Name}} {{.Runtime.Type}}) *cobra.Command {
{{- range .Command.StringFlags}}
	var {{.Name}} string
{{- end}}
	cmd := &cobra.Command{
		Use:          "{{.Command.Use}}",
		Short:        "{{.Command.Short}}",
		Long:         `{{.Command.Long}}`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
{{- if eq .Command.MethodType 1 }}
			// standard create method
			ctx := {{.Runtime.Name}}.Context(cmd)
			c, err := {{.Runtime.Name}}.{{.Command.Api | ToTitle}}{{.Command.ApiVersion | ToTitle}}(cmd)
			if err != nil {
				return fmt.Errorf("failed to create a client for {{.Command.Api}}.{{.Command.ApiVersion}}: %w", err)
			}
			res, err := c.{{.Command.Method}}(ctx, &{{.Command.Request.Type}}{
{{.Command.Request | ToFields 4}}
			})
			if err != nil {
				return fmt.Errorf("{{.Command.Api}}.{{.Command.ApiVersion}}: failed to {{.Command.Method}}: %w", err)
			}
			message, err := protojson.Marshal(res)
			if err != nil {
				return err
			}
			cmd.Println(string(message))
{{- end}}
			return nil
		},
	}
{{- range .Command.StringFlags}}
	cmd.Flags().StringVar(&{{.Name}}, "{{.DisplayName}}", "{{.Value}}", "{{.Usage}}")
{{- end}}
	return cmd
}
