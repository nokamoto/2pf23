// Code generated by server-gen. DO NOT EDIT.
package {{.Service.ApiVersion}}

import (
	"context"
	"errors"
)

import (
{{- range .Imports}}
	{{if .Alias}}{{.Alias}} "{{.Path}}"{{else}}"{{.Path}}"{{end}}
{{- end}}
)

{{if .EnableMock}}//go:generate mockgen -source=$GOFILE -package=mock$GOPACKAGE -destination=mock/$GOFILE{{end}}
type runtime interface {
{{- range .Service.Calls}}
{{- if eq .MethodType 1}}
	Create(ctx context.Context, resource *{{.ResourceType}}) (*{{.ResourceType}}, error)
{{- end}}
{{- end}}
}

type service struct {
	{{.Service.UnimplementedServer}}
	logger *zap.Logger
	rt     runtime
}

func NewService(logger *zap.Logger, rt runtime) *service {
	return &service{
		logger: logger.Named("{{.Service.Name}}.{{.Service.ApiVersion}}"),
		rt:     rt,
	}
}

{{range .Service.Calls}}func (s *service) {{.Name}}(ctx context.Context, req *{{.RequestType}}) (*{{.ResponseType}}, error) {
	logger := s.logger.With(zap.String("method", "{{.Name}}"), zap.Any("request", req))
	logger.Debug("request received")
{{- if eq .MethodType 1}}
	// standard create method
	res, err := s.rt.Create(ctx, req.{{.GetResourceMethod}}())
	if errors.Is(err, app.ErrInvalidArgument) {
		logger.Error("invalid argument", zap.Error(err))
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}
	if err != nil {
		logger.Error("unknown error", zap.Error(err))
		return nil, status.Error(codes.Unknown, "unknown error")
	}
	return res, nil
{{- else}}
	return nil, status.Error(codes.Unimplemented, "method not implemented")
{{- end}}
}
{{- end}}
