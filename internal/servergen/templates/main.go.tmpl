// Code generated by server-gen. DO NOT EDIT.
package {{.Service.ApiVersion}}

import (
	"context"
)

import (
{{- range .Imports}}
	{{if .Alias}}{{.Alias}} "{{.Path}}"{{else}}"{{.Path}}"{{end}}
{{- end}}
)

{{if .EnableMock}}//go:generate go run -mod=mod github.com/golang/mock/mockgen -source=$GOFILE -package=mock$GOPACKAGE -destination=mock/$GOFILE{{end}}
type runtime interface {
{{- range .Service.Calls}}
{{- if eq .MethodType 1}}
	Create(ctx context.Context, resource *{{.ResourceType}}) (*{{.ResourceType}}, error)
{{- else if eq .MethodType 2}}
	Get(ctx context.Context, name string) (*{{.ResourceType}}, error)
{{- else if eq .MethodType 3}}
	Delete(ctx context.Context, name string) (*{{.ResponseType}}, error)
{{- end}}
{{- end}}
}

type service struct {
	{{.Service.UnimplementedServer}}
	logger *zap.Logger
	rt     runtime
}

func NewService(logger *zap.Logger, rt runtime) *service {
	return &service{
		logger: logger.Named("{{.Service.Name}}.{{.Service.ApiVersion}}"),
		rt:     rt,
	}
}

{{range .Service.Calls}}
func (s *service) {{.Name}}(ctx context.Context, req *{{.RequestType}}) (*{{.ResponseType}}, error) {
	logger := s.logger.With(zap.String("method", "{{.Name}}"), zap.Any("request", req))
	logger.Debug("request received")
{{- if eq .MethodType 1}}
	res, err := s.rt.Create(ctx, req.{{.GetResourceMethod}}())
{{- else if eq .MethodType 2}}
	res, err := s.rt.Get(ctx, req.GetName())
{{- else if eq .MethodType 3}}
	res, err := s.rt.Delete(ctx, req.GetName())
{{- end}}
	return helper.ErrorOr(logger, res, err)
}

{{end}}
