// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mockv1alpha is a generated GoMock package.
package mockv1alpha

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1 "github.com/nokamoto/2pf23/pkg/api/inhouse/v1"
	kev1alpha "github.com/nokamoto/2pf23/pkg/api/ke/v1alpha"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// Mockruntime is a mock of runtime interface.
type Mockruntime struct {
	ctrl     *gomock.Controller
	recorder *MockruntimeMockRecorder
}

// MockruntimeMockRecorder is the mock recorder for Mockruntime.
type MockruntimeMockRecorder struct {
	mock *Mockruntime
}

// NewMockruntime creates a new mock instance.
func NewMockruntime(ctrl *gomock.Controller) *Mockruntime {
	mock := &Mockruntime{ctrl: ctrl}
	mock.recorder = &MockruntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockruntime) EXPECT() *MockruntimeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Mockruntime) Create(ctx context.Context, resource *kev1alpha.Cluster) (*kev1alpha.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, resource)
	ret0, _ := ret[0].(*kev1alpha.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockruntimeMockRecorder) Create(ctx, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockruntime)(nil).Create), ctx, resource)
}

// Delete mocks base method.
func (m *Mockruntime) Delete(ctx context.Context, name string) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockruntimeMockRecorder) Delete(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockruntime)(nil).Delete), ctx, name)
}

// Get mocks base method.
func (m *Mockruntime) Get(ctx context.Context, name string) (*kev1alpha.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(*kev1alpha.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockruntimeMockRecorder) Get(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockruntime)(nil).Get), ctx, name)
}

// List mocks base method.
func (m *Mockruntime) List(ctx context.Context, pageSize int32, page *v1.Pagination) ([]*kev1alpha.Cluster, *v1.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, pageSize, page)
	ret0, _ := ret[0].([]*kev1alpha.Cluster)
	ret1, _ := ret[1].(*v1.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockruntimeMockRecorder) List(ctx, pageSize, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Mockruntime)(nil).List), ctx, pageSize, page)
}

// Update mocks base method.
func (m *Mockruntime) Update(ctx context.Context, resource *kev1alpha.Cluster, mask *fieldmaskpb.FieldMask) (*kev1alpha.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resource, mask)
	ret0, _ := ret[0].(*kev1alpha.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockruntimeMockRecorder) Update(ctx, resource, mask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Mockruntime)(nil).Update), ctx, resource, mask)
}
