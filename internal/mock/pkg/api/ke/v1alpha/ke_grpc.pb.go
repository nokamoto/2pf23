// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/api/ke/v1alpha/ke_grpc.pb.go

// Package mock_kev1alpha is a generated GoMock package.
package mock_kev1alpha

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kev1alpha "github.com/nokamoto/2pf23/pkg/api/ke/v1alpha"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockKeServiceClient is a mock of KeServiceClient interface.
type MockKeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeServiceClientMockRecorder
}

// MockKeServiceClientMockRecorder is the mock recorder for MockKeServiceClient.
type MockKeServiceClientMockRecorder struct {
	mock *MockKeServiceClient
}

// NewMockKeServiceClient creates a new mock instance.
func NewMockKeServiceClient(ctrl *gomock.Controller) *MockKeServiceClient {
	mock := &MockKeServiceClient{ctrl: ctrl}
	mock.recorder = &MockKeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeServiceClient) EXPECT() *MockKeServiceClientMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockKeServiceClient) CreateCluster(ctx context.Context, in *kev1alpha.CreateClusterRequest, opts ...grpc.CallOption) (*kev1alpha.Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCluster", varargs...)
	ret0, _ := ret[0].(*kev1alpha.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockKeServiceClientMockRecorder) CreateCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockKeServiceClient)(nil).CreateCluster), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockKeServiceClient) DeleteCluster(ctx context.Context, in *kev1alpha.DeleteClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockKeServiceClientMockRecorder) DeleteCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockKeServiceClient)(nil).DeleteCluster), varargs...)
}

// GetCluster mocks base method.
func (m *MockKeServiceClient) GetCluster(ctx context.Context, in *kev1alpha.GetClusterRequest, opts ...grpc.CallOption) (*kev1alpha.Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*kev1alpha.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockKeServiceClientMockRecorder) GetCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockKeServiceClient)(nil).GetCluster), varargs...)
}

// MockKeServiceServer is a mock of KeServiceServer interface.
type MockKeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockKeServiceServerMockRecorder
}

// MockKeServiceServerMockRecorder is the mock recorder for MockKeServiceServer.
type MockKeServiceServerMockRecorder struct {
	mock *MockKeServiceServer
}

// NewMockKeServiceServer creates a new mock instance.
func NewMockKeServiceServer(ctrl *gomock.Controller) *MockKeServiceServer {
	mock := &MockKeServiceServer{ctrl: ctrl}
	mock.recorder = &MockKeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeServiceServer) EXPECT() *MockKeServiceServerMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockKeServiceServer) CreateCluster(arg0 context.Context, arg1 *kev1alpha.CreateClusterRequest) (*kev1alpha.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(*kev1alpha.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockKeServiceServerMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockKeServiceServer)(nil).CreateCluster), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockKeServiceServer) DeleteCluster(arg0 context.Context, arg1 *kev1alpha.DeleteClusterRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockKeServiceServerMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockKeServiceServer)(nil).DeleteCluster), arg0, arg1)
}

// GetCluster mocks base method.
func (m *MockKeServiceServer) GetCluster(arg0 context.Context, arg1 *kev1alpha.GetClusterRequest) (*kev1alpha.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*kev1alpha.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockKeServiceServerMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockKeServiceServer)(nil).GetCluster), arg0, arg1)
}

// mustEmbedUnimplementedKeServiceServer mocks base method.
func (m *MockKeServiceServer) mustEmbedUnimplementedKeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeServiceServer")
}

// mustEmbedUnimplementedKeServiceServer indicates an expected call of mustEmbedUnimplementedKeServiceServer.
func (mr *MockKeServiceServerMockRecorder) mustEmbedUnimplementedKeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeServiceServer", reflect.TypeOf((*MockKeServiceServer)(nil).mustEmbedUnimplementedKeServiceServer))
}

// MockUnsafeKeServiceServer is a mock of UnsafeKeServiceServer interface.
type MockUnsafeKeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeKeServiceServerMockRecorder
}

// MockUnsafeKeServiceServerMockRecorder is the mock recorder for MockUnsafeKeServiceServer.
type MockUnsafeKeServiceServerMockRecorder struct {
	mock *MockUnsafeKeServiceServer
}

// NewMockUnsafeKeServiceServer creates a new mock instance.
func NewMockUnsafeKeServiceServer(ctrl *gomock.Controller) *MockUnsafeKeServiceServer {
	mock := &MockUnsafeKeServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeKeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeKeServiceServer) EXPECT() *MockUnsafeKeServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedKeServiceServer mocks base method.
func (m *MockUnsafeKeServiceServer) mustEmbedUnimplementedKeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeServiceServer")
}

// mustEmbedUnimplementedKeServiceServer indicates an expected call of mustEmbedUnimplementedKeServiceServer.
func (mr *MockUnsafeKeServiceServerMockRecorder) mustEmbedUnimplementedKeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeServiceServer", reflect.TypeOf((*MockUnsafeKeServiceServer)(nil).mustEmbedUnimplementedKeServiceServer))
}
